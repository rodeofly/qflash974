// Generated by CoffeeScript 1.12.7
(function() {
  var CardSet, ID, THEMES,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  THEMES = {};

  ID = 1;

  CardSet = (function() {
    function CardSet(theme1, cycle1) {
      var $carte, $recto, $verso, a, attendu, attenduV, carte, domainClass, html, i, id, n, niveau, nombre_attendus, nombre_notions, notion, notionV, notionsV, numero_attendu, numero_notion, ref, ref1, ref2, ref3, savoirfaire, savoirfaires, savoirfairesV;
      this.theme = theme1;
      this.cycle = cycle1;
      this.attendus = THEMES[this.theme]['attendus'];
      this.set = [];
      numero_attendu = 0;
      nombre_attendus = Object.keys(this.attendus).length;
      $carte = $($("#carteObject").html());
      $recto = $carte.find(".recto");
      $verso = $carte.find(".verso");
      for (attendu in this.attendus) {
        numero_attendu++;
        numero_notion = 0;
        nombre_notions = Object.keys(THEMES[this.theme]['attendus'][attendu]['notions']).length;
        ref = THEMES[this.theme]['attendus'][attendu]['notions'];
        for (notion in ref) {
          savoirfaires = ref[notion];
          id = ID++;
          numero_notion++;
          domainClass = THEMES[this.theme]['attendus'][attendu]['domaine'];
          $carte.find(".bleeding.recto").attr("data-id", id + "r");
          $recto.attr("data-id", id + "r");
          $recto.attr("data-theme", THEMES[this.theme]['classe']);
          $recto.find(".carteID").html(id);
          $recto.find(".cycle").html(this.cycle);
          $recto.find(".theme").html(this.theme);
          $recto.find(".logo").attr("data-theme", THEMES[this.theme]['classe']);
          $recto.find(".attendu-title").html("[" + numero_attendu + "/" + nombre_attendus + "] " + attendu);
          $recto.find(".attendu-title").attr("data-domaine", domainClass);
          $recto.find(".citation").html(THEMES[this.theme]['citation']);
          $recto.find(".notion").html(notion);
          html = "";
          for (n = i = 1, ref1 = nombre_notions; 1 <= ref1 ? i <= ref1 : i >= ref1; n = 1 <= ref1 ? ++i : --i) {
            if (n === numero_notion) {
              html += "<img class='no-icon chkbox-checked'>";
            } else {
              html += "<img class='no-icon chkbox-unchecked'>";
            }
          }
          $recto.find(".notions-targets").html(html);
          $carte.find(".bleeding.verso").attr("data-id", id + "v");
          $verso.attr("data-theme", THEMES[this.theme]['classe']);
          $verso.attr("data-id", id + "v");
          $verso.find(".cycle").html("Correction");
          $verso.find(".theme").html(this.theme);
          $verso.find(".logo").attr("data-theme", THEMES[this.theme]['classe']);
          a = 0;
          $verso.find(".attendus-content").empty();
          ref2 = THEMES[this.theme]['attendus'];
          for (attenduV in ref2) {
            notionsV = ref2[attenduV];
            a++;
            if (a === numero_attendu) {
              $verso.find(".attendus-content").append("<li class='attenduV'>\n  " + attenduV + "\n  <ol class='notions'></ol>\n</li>");
              n = 0;
              ref3 = notionsV.notions;
              for (notionV in ref3) {
                savoirfairesV = ref3[notionV];
                n++;
                if (n === numero_notion) {
                  $verso.find(".notions").append("<li class='notion'>" + notionV + "\n  <ol class='savoirfaires'></ol>\n</li>");
                  for (savoirfaire in savoirfairesV) {
                    niveau = savoirfairesV[savoirfaire];
                    $verso.find(".savoirfaires").append("<li>" + savoirfaire + "  \n  <img class='star' src='img/" + niveau + "star.png'>\n</li>");
                  }
                } else {
                  $verso.find(".notions").append("<li class='notion'>" + notionV + "</li>");
                }
              }
            } else {
              $verso.find(".attendus-content").append("<li class='attendu'>" + attenduV + "</li>");
            }
          }
          carte = $("<div></div>");
          carte.append($carte);
          this.set.push(carte.html());
        }
      }
    }

    return CardSet;

  })();

  $(function() {
    var batkart, batkartQF, generateCanvas, zip;
    zip = new JSZip();
    batkartQF = function(file, cycle) {
      return $(".QFquestion").each(function() {
        var $carte, $refr, $refv, card, competence, correction, dcomp, domaine, dtab, enonce, i, id, j, len, len1, num_sf, ref, ref1, savoirfaire, totalSF;
        $(".deck").hide();
        id = $(this).data("id");
        console.log($(this));
        card = id.split(".")[1];
        num_sf = id.split(".")[2];
        dtab = $(this).data("domaines");
        dcomp = $(this).data("competences");
        enonce = $(this).find(".QFEnonce").contents();
        correction = $(this).find(".QFCorrection").contents();
        $refr = $(".deck .face[data-id='" + card + "r']");
        $refv = $(".deck .face[data-id='" + card + "v']");
        totalSF = $refv.find(".savoirfaires>li").length;
        savoirfaire = $refv.find(".savoirfaires>li:nth-child(" + num_sf + ")").html();
        console.log(savoirfaire);
        $carte = ($refr.parent().parent().parent()).clone();
        $carte.find(".savoirfaire").append("n°" + num_sf + "/" + totalSF + " : " + savoirfaire);
        ref = ["D1", "D2", "D3", "D4", "D5"];
        for (i = 0, len = ref.length; i < len; i++) {
          domaine = ref[i];
          if (indexOf.call(dtab, domaine) >= 0) {
            $carte.find(".domaines").append("<div class='domaine' data-domaine='" + domaine + "'></div>");
          }
        }
        ref1 = ["chercher", "modeliser", "representer", "raisonner", "calculer", "communiquer"];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          competence = ref1[j];
          if (indexOf.call(dcomp, competence) >= 0) {
            $carte.find(".competences").append("<div class='competence " + competence + "'></div>");
          }
        }
        $carte.find(".question").append(enonce);
        $carte.find(".carteID").html(ID);
        $(".deckQF").append($carte);
        $carte = ($refv.parent().parent().parent()).clone();
        $carte.find(".correction").append(correction);
        $(".deckQF").append($carte);
        return ID++;
      });
    };
    batkart = function(file, cycle) {
      return $.getJSON(file, function(data) {
        var i, j, len, len1, ref, s, set, theme, themes;
        THEMES = data;
        themes = Object.keys(THEMES);
        $(".deck").empty();
        for (i = 0, len = themes.length; i < len; i++) {
          theme = themes[i];
          set = new CardSet(theme, cycle);
          ref = set.set;
          for (j = 0, len1 = ref.length; j < len1; j++) {
            s = ref[j];
            $(".deck").append(s);
          }
        }
        return $(".deck").sortable();
      });
    };
    generateCanvas = function(UID, carte, id, zip, deferred) {
      return html2canvas(carte).then(function(canvas) {
        var imgUrl;
        imgUrl = canvas.toDataURL();
        zip.file(UID + ".carte-" + id + ".png", imgUrl.split('base64,')[1], {
          base64: true
        });
        deferred.resolve();
        return $("#info").html("Carte " + id + " #" + UID + " traité !");
      });
    };
    $("#toPNG").on("click", function() {
      var $selected_bleedings, UID, deferreds;
      $(this).prop("disabled", true);
      deferreds = [];
      $selected_bleedings = $(".bleeding:visible");
      UID = 0;
      $selected_bleedings.each(function() {
        var deferred, id;
        UID++;
        id = $(this).attr("data-id");
        $("#info").html("Envoi de la carte " + id);
        deferred = $.Deferred();
        deferreds.push(deferred.promise());
        return generateCanvas(UID, $(this)[0], id, zip, deferred);
      });
      $("#info").html("Travail en cours...");
      return $.when.apply($, deferreds).then(function() {
        $("#toPNG").prop("disabled", false);
        return zip.generateAsync({
          type: "blob"
        }).then(function(content) {
          var blobLink, link;
          link = document.createElement('a');
          blobLink = window.URL.createObjectURL(content);
          link.addEventListener('click', function(ev) {
            link.href = blobLink;
            return link.download = 'cartes.zip';
          }, false);
          return link.click();
        });
      });
    });
    $("#cycle3").on("click", function() {
      ID = 1;
      return batkart("cycle3.json", "Cycle 3");
    });
    $("#cycle4").on("click", function() {
      ID = 1;
      return batkart("cycle4.json", "Cycle 4");
    });
    return $("#toQF").on("click", function() {
      ID = 1;
      return batkartQF("QFcycle3.json", "Cycle 4");
    });
  });

}).call(this);
